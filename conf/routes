# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           @controllers.FileStoreController.index
GET     /login                      @controllers.Application.login
POST    /login                      @controllers.Application.postLogin
GET     /invite                     @controllers.Application.invite
POST    /invite                     @controllers.Application.postInvite
GET     /change-password            @controllers.FileStoreController.index
POST    /change-password            @controllers.Application.changePassword
GET     /notifications              @controllers.FileStoreController.index
GET     /manage-groups              @controllers.FileStoreController.index
GET     /reset-password             @controllers.Application.forgottenPassword
POST    /reset-password             @controllers.Application.postForgottenPassword
GET     /settings                   @controllers.FileStoreController.index
GET     /user                       @controllers.UserController.usersJson
GET     /user/notifications         @controllers.UserController.notificationsJson
GET     /user/notifications/:id     @controllers.UserController.getNotification(id)
PUT     /user/notifications/:id     @controllers.UserController.putNotification(id)
DELETE  /user/notifications/:id     @controllers.UserController.deleteNotification(id)
GET     /user-exists/:email         @controllers.Application.userExists(email: String)
GET     /user-unverified/:email     @controllers.Application.userUnverified(email: String)
GET     /user/:email/verify/:token  @controllers.Application.verify(email: String, token: String)
POST    /user/:email/verify/:token  @controllers.Application.postVerify(email: String, token: String)

GET     /groups                     @controllers.GroupController.list
POST    /groups                     @controllers.GroupController.create
GET     /groups/:id                 @controllers.GroupController.get(id)
PUT     /groups/:id                 @controllers.GroupController.update(id)
DELETE  /groups/:id                 @controllers.GroupController.delete(id)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /favicon.ico                controllers.Assets.at(path="/public", file="images/favicon.ico")
GET     /webjars/*file              controllers.WebJarAssets.at(file)
GET     /require.js                 controllers.WebJarAssets.requirejs

GET     /filestore                  @controllers.FileStoreController.filestoreJson()

GET     /flags/:type                @controllers.FileStoreController.flagsJson(type)
POST    /flags/:type                @controllers.FileStoreController.addFlag(type)
GET     /flags/:type/:id            @controllers.FileStoreController.flagJson(type, id)
DELETE  /flags/:type/:id            @controllers.FileStoreController.deleteFlag(type, id)

POST    /folder/:folderId/folders       @controllers.FileStoreController.mkdir(folderId, mkdir: String)
GET     /folder/:folderId               @controllers.FileStoreController.showFolder(folderId: String)
PUT     /folder/:folderId               @controllers.FileStoreController.modifyFolder(folderId: String)
GET     /folder/:folderId/permissions   @controllers.FileStoreController.groupPermissionList(folderId: String)
GET     /folder/:id/permissions/:group  @controllers.FileStoreController.groupPermission(id: String, group: String)
POST    /folder/:folderId/permissions   @controllers.FileStoreController.permissionUpdate(folderId: String)
GET     /folder/:folderId/archive       @controllers.FileStoreController.downloadFolder(folderId)
POST    /folder/:folderId/files         @controllers.FileStoreController.uploadToFolder(folderId)
DELETE  /folder/:folderId               @controllers.FileStoreController.delete(folderId)

POST    /file                           @controllers.FileStoreController.createFile()
GET     /file/:fileId                   @controllers.FileStoreController.showFile(fileId: String)
PUT     /file/:fileId                   @controllers.FileStoreController.modifyFile(fileId: String)
GET     /file/:fileId/versions          @controllers.FileStoreController.versionList(fileId: String)
POST    /file/:fileId/versions/new      @controllers.FileStoreController.updateFile(fileId)
GET     /file/:fileId/versions/:vn      @controllers.FileStoreController.downloadFile(fileId, vn)
DELETE  /file/:fileId/versions/:vn      @controllers.FileStoreController.deleteVersion(fileId, vn)
GET     /file/:fileId/versions/:vn/text-summary    @controllers.FileStoreController.fileTextSummary(fileId, vn)
DELETE  /file/:fileId                   @controllers.FileStoreController.delete(fileId)
GET     /file/:fileId/comments          @controllers.CommentController.list(fileId)
POST    /file/:fileId/comments          @controllers.CommentController.create(fileId)
GET     /file/:fileId/comments/:cId     @controllers.CommentController.get(cId, fileId)
PUT     /file/:fileId/comments/:cId     @controllers.CommentController.update(cId, fileId)
DELETE  /file/:fileId/comments/:cId     @controllers.CommentController.delete(cId, fileId)
HEAD    /file/:fileId/spreadsheet-external-references         @controllers.SpreadsheetController.hasExternalRefs(fileId)
POST    /file/:fileId/spreadsheet-external-references/update  @controllers.SpreadsheetController.updateExternalRefs(fileId)

GET     /events                     @controllers.FileStoreAsync.events()

# play-authenticate
GET     /logout                     com.feth.play.module.pa.controllers.Authenticate.logout
GET     /authenticate/:provider     com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)
GET     /authenticate/:provider/denied     @controllers.Application.oAuthDenied(provider: String)

GET    /folder/:folderId/charts.zip @controllers.ArchiveAsync.chartArchive(folderId: String)
GET    /file/:fileId/charts.zip     @controllers.ArchiveAsync.chartArchive(fileId: String)
GET    /file/:fileId/charts         @controllers.Chart.charts(format: String ?= "png", fileId)
GET    /file/:fileId/charts/:chart.:format       @controllers.Chart.chart(chart, format, fileId)

GET    /file/:fileId/html           @controllers.HtmlController.toHtml(fileId)
GET    /file/:fileId/htmlzip        @controllers.HtmlController.toHtmlZip(fileId)
GET    /file/:fileId/pdf            @controllers.HtmlController.toPdf(fileId, copts: String ?= "")

GET    /search                      @controllers.Search.search(q: String ?="")